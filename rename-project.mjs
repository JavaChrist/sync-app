import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// V√©rifier si un nom de projet a √©t√© fourni
if (process.argv.length < 3) {
  console.log('Usage: node rename-project.js <nouveau-nom-du-projet>');
  process.exit(1);
}

const newProjectName = process.argv[2];

// Fonction pour mettre √† jour le package.json
function updatePackageJson() {
  const packageJsonPath = path.join(__dirname, 'package.json');
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  packageJson.name = newProjectName;
  
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('‚úÖ package.json mis √† jour');
}

// Fonction pour cr√©er le .env.local √† partir du .env.example
function setupEnvFile() {
  const envExamplePath = path.join(__dirname, '.env.example');
  const envLocalPath = path.join(__dirname, '.env.local');
  
  if (!fs.existsSync(envLocalPath)) {
    fs.copyFileSync(envExamplePath, envLocalPath);
    console.log('‚úÖ .env.local cr√©√© √† partir de .env.example');
  } else {
    console.log('‚ÑπÔ∏è .env.local existe d√©j√†');
  }
}

// Ex√©cuter les fonctions
try {
  updatePackageJson();
  setupEnvFile();
  console.log('\nüéâ Projet renomm√© avec succ√®s !');
  console.log('\nProchaines √©tapes :');
  console.log('1. Remplir les variables Firebase dans .env.local');
  console.log('2. Installer les d√©pendances : npm install');
  console.log('3. D√©marrer le projet : npm start');
} catch (error) {
  console.error('‚ùå Erreur lors du renommage :', error.message);
} 
